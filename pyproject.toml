[project]
name = "cle-sh"
version = "0.1.0"
description = "CLE-SH: Comprehensive Literal Explanation package for SHapley values by statistical validity (arXiv:2409.12578)"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "CLE-SH Contributors"}
]
keywords = ["machine-learning", "explainable-ai", "shap", "statistics", "interpretability"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

# Core dependencies - minimal set required for basic functionality
dependencies = [
    "numpy>=1.22.0",
    "pandas>=1.4.0",
    "scipy>=1.8.0",
    "statsmodels>=0.13.5",
    "shap>=0.42.0",
    "loguru>=0.6.0",
]

[project.optional-dependencies]
# Visualization dependencies
viz = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]

# Example and demo dependencies
examples = [
    "scikit-learn>=1.0.0",
]

# Development dependencies
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.4.8",
    "pre-commit>=3.5.0",
]

# Testing dependencies
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "scikit-learn>=1.1.0",
]

# Full installation with all optional dependencies
all = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
]

[dependency-groups]
# Testing dependencies for uv
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "scikit-learn>=1.1.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
]

# Development dependencies for uv
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.4.8",
    "pre-commit>=3.5.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/rrtjr/cle-sh"
Repository = "https://github.com/rrtjr/cle-sh"
Documentation = "https://github.com/rrtjr/cle-sh#readme"
"Bug Tracker" = "https://github.com/rrtjr/cle-sh/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["clesh*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--disable-warnings",
    "--durations=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "visualization: marks tests that use matplotlib",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::FutureWarning",
    "ignore::RuntimeWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["clesh"]
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.black]
line-length = 100
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 100

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # allow assert statements in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
